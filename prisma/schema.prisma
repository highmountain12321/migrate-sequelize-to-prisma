datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

model activities {
  id             Int             @id @default(autoincrement())
  name           String?         @db.VarChar(255)
  createdAt      DateTime        @db.DateTime(0)
  userId         Int?
  contactId      Int?
  typeId         Int?
  users          users?          @relation(fields: [userId], references: [id], map: "activities_ibfk_1")
  contacts       contacts?       @relation(fields: [contactId], references: [id], map: "activities_ibfk_2")
  activity_types activity_types? @relation(fields: [typeId], references: [id], map: "activities_ibfk_3")

  @@index([contactId], map: "contactId")
  @@index([typeId], map: "typeId")
  @@index([userId], map: "userId")
}

model activity_types {
  id          Int          @id @default(autoincrement())
  slug        String?      @db.VarChar(255)
  name        String?      @db.VarChar(255)
  description String?      @db.VarChar(255)
  activities  activities[]
}

model adders {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  value       String?   @db.VarChar(255)
  quantity    Int?
  isActive    Boolean?
  description String?   @db.VarChar(255)
  group       String?   @db.VarChar(255)
  createdAt   DateTime  @db.DateTime(0)
  contactId   Int?
  userId      Int?
  test        Int?      @db.TinyInt
  contacts    contacts? @relation(fields: [contactId], references: [id], map: "adders_ibfk_1")
  users       users?    @relation(fields: [userId], references: [id], map: "adders_ibfk_2")

  @@index([contactId], map: "contactId")
  @@index([userId], map: "userId")
}

model api_keys {
  id              Int              @id @default(autoincrement())
  token           String?          @db.VarChar(255)
  count           Int?
  limit           Int?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @db.DateTime(0)
  userId          Int?
  userGroupId     Int?
  apiKey          String?          @db.VarChar(11)
  requestDate     DateTime?        @db.DateTime(0)
  name            String?          @db.VarChar(50)
  description     String?          @db.VarChar(50)
  organizationId  Int?             @default(1)
  sourceId        Int?
  users           users?           @relation(fields: [userId], references: [id], map: "api_keys_ibfk_1")
  organizations   organizations?   @relation(fields: [organizationId], references: [id], onUpdate: SetNull, map: "organization_fk")
  contact_sources contact_sources? @relation(fields: [sourceId], references: [id], onUpdate: SetNull, map: "source_fk")
  user_groups     user_groups?     @relation(fields: [userGroupId], references: [id], onUpdate: SetNull, map: "user_group")

  @@index([organizationId], map: "organization_fk")
  @@index([sourceId], map: "source_fk")
  @@index([userId], map: "userId")
  @@index([userGroupId], map: "user_group")
}

model app_emails {
  id         Int      @id @default(autoincrement())
  email      String?  @db.VarChar(255)
  provider   String?  @db.VarChar(255)
  providerId String?  @db.VarChar(255)
  isActive   Boolean?
  createdAt  DateTime @db.DateTime(0)
  updatedAt  DateTime @db.DateTime(0)
  userId     Int?
  users      users?   @relation(fields: [userId], references: [id], map: "app_emails_ibfk_1")

  @@index([userId], map: "userId")
}

model app_event_categories {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  slug        String?  @db.VarChar(255)
  isActive    Boolean?
}

model app_event_levels {
  id        Int      @id @default(autoincrement())
  isActive  Boolean?
  isDefault Boolean?
  name      String?  @db.VarChar(255)
  slug      String?  @db.VarChar(255)
}

model app_event_types {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  slug        String?  @db.VarChar(255)
  isActive    Boolean?
  categoryId  Int?
}

model app_events {
  id            Int            @id @default(autoincrement())
  isDismissed   Boolean?
  comment       String?        @db.VarChar(255)
  createdAt     DateTime       @db.DateTime(0)
  levelId       Int?
  typeId        Int?
  contactId     Int?
  userId        Int?
  closingFormId Int?
  contacts      contacts?      @relation(fields: [contactId], references: [id], map: "app_events_ibfk_1")
  users         users?         @relation(fields: [userId], references: [id], map: "app_events_ibfk_2")
  closing_forms closing_forms? @relation(fields: [closingFormId], references: [id], map: "app_events_ibfk_3")

  @@index([closingFormId], map: "closingFormId")
  @@index([contactId], map: "contactId")
  @@index([userId], map: "userId")
}

model app_phones {
  id              Int      @id @default(autoincrement())
  phone           String?  @db.VarChar(255)
  provider        String?  @db.VarChar(255)
  providerPhoneId String?  @db.VarChar(255)
  isActive        Boolean?
  createdAt       DateTime @db.DateTime(0)
  updatedAt       DateTime @db.DateTime(0)
  userId          Int?
  users           users?   @relation(fields: [userId], references: [id], map: "app_phones_ibfk_1")

  @@index([userId], map: "userId")
}

model appointment_types {
  id           Int            @id @default(autoincrement())
  slug         String         @unique(map: "slug") @db.VarChar(255)
  name         String         @db.VarChar(255)
  description  String?        @db.VarChar(255)
  isDefault    Boolean?
  isActive     Boolean?
  order        Int?
  add          Int?
  color        Int?
  group        String?        @db.VarChar(255)
  appointments appointments[]
}

model appointments {
  id                  Int                   @id @default(autoincrement())
  fromDate            DateTime?             @db.DateTime(0)
  toDate              DateTime?             @db.DateTime(0)
  metadata            String?               @db.LongText
  cancelledAt         DateTime?             @db.DateTime(0)
  isActive            Boolean               @default(true)
  group               String?               @db.VarChar(255)
  createdAt           DateTime              @db.DateTime(0)
  contactId           Int?
  userId              Int?
  typeId              Int?
  tzOffset            Int?
  timezone            String?               @db.LongText
  timezoneOffset      String?               @db.VarChar(255)
  endDate             String?               @db.VarChar(255)
  startDate           String?               @db.VarChar(255)
  test                Boolean?
  utcStartDateTime    DateTime?             @db.DateTime(0)
  users               users?                @relation(fields: [userId], references: [id], map: "appointments_ibfk_65")
  appointment_types   appointment_types?    @relation(fields: [typeId], references: [id], map: "appointments_ibfk_66")
  contact_appointment contact_appointment[]
  contact_updates     contact_updates[]
  internal_updates    internal_updates[]

  @@index([typeId], map: "typeId")
  @@index([userId], map: "userId")
}

model auto_action_types {
  id       Int      @id @default(autoincrement())
  name     String?  @db.VarChar(255)
  isActive Boolean?
}

model auto_actions {
  id                             Int                              @id @default(autoincrement())
  name                           String?                          @db.VarChar(255)
  description                    String?                          @db.VarChar(255)
  isActive                       Boolean?
  typeId                         Int?
  fn                             String?                          @db.VarChar(255)
  auto_event_trigger_auto_action auto_event_trigger_auto_action[]
}

model auto_automation_logs {
  id               Int               @id @default(autoincrement())
  log              String?           @db.VarChar(255)
  isError          Boolean?
  createdAt        DateTime          @db.DateTime(0)
  autoAutomationId Int?
  auto_automations auto_automations? @relation(fields: [autoAutomationId], references: [id], map: "auto_automation_logs_ibfk_1")

  @@index([autoAutomationId], map: "autoAutomationId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auto_automations {
  id                   Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(255)
  isPrivate            Boolean?
  isActive             Boolean                @default(true)
  lastRunDate          DateTime?              @db.DateTime(0)
  createdAt            DateTime               @db.DateTime(0)
  updatedAt            DateTime               @db.DateTime(0)
  userId               Int?
  targetUserId         Int?
  targetGroupId        Int?
  creatorId            Int?
  phoneId              Int?
  emailId              Int?
  actionId             Int?
  triggerId            Int?
  contactSourceId      Int?
  twilioFlowId         String?                @db.Text
  phoneNumber          String?                @db.VarChar(20)
  targetUrl            String?                @db.Text
  auto_automation_logs auto_automation_logs[]
  users                users?                 @relation(fields: [userId], references: [id], map: "auto_automations_ibfk_1")
  contact_sources      contact_sources?       @relation(fields: [contactSourceId], references: [id], onUpdate: SetNull, map: "auto_contactSourceId")

  @@index([contactSourceId], map: "auto_contactSourceId")
  @@index([userId], map: "userId")
}

model auto_event_trigger_auto_action {
  autoEventTriggerId  Int
  autoActionId        Int
  auto_event_triggers auto_event_triggers @relation(fields: [autoEventTriggerId], references: [id], onDelete: Cascade, map: "auto_event_trigger_auto_action_ibfk_1")
  auto_actions        auto_actions        @relation(fields: [autoActionId], references: [id], onDelete: Cascade, map: "auto_event_trigger_auto_action_ibfk_2")

  @@id([autoEventTriggerId, autoActionId])
  @@index([autoActionId], map: "autoActionId")
}

model auto_event_trigger_types {
  id       Int      @id @default(autoincrement())
  name     String?  @db.VarChar(255)
  isActive Boolean?
}

model auto_event_triggers {
  id                             Int                              @id @default(autoincrement())
  name                           String?                          @db.VarChar(255)
  description                    String?                          @db.VarChar(255)
  isActive                       Boolean?
  typeId                         Int?
  auto_event_trigger_auto_action auto_event_trigger_auto_action[]
}

model calendars {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(255)
  calendarId Int?
  isActive   Boolean?
  createdAt  DateTime @db.DateTime(0)
  userId     Int?
  users      users?   @relation(fields: [userId], references: [id], map: "calendars_ibfk_1")

  @@index([userId], map: "userId")
}

model canvas_area_coords {
  id                  Int                @id @default(autoincrement())
  lat                 Float
  lng                 Float
  canvas_user_area_id Int?
  createdAt           DateTime           @db.DateTime(0)
  updatedAt           DateTime           @db.DateTime(0)
  canvas_user_areas   canvas_user_areas? @relation(fields: [canvas_user_area_id], references: [id], map: "canvas_area_coords_ibfk_1")

  @@index([canvas_user_area_id], map: "canvas_user_area_id")
}

model canvas_areas {
  id        Int      @id @default(autoincrement())
  areas     String?  @db.VarChar(255)
  isActive  Boolean  @default(true)
  group     String?  @default("0") @db.VarChar(255)
  isDefault Boolean  @default(false)
  order     Int      @default(1)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
}

model canvas_markers {
  id         Int      @id @default(autoincrement())
  name       String   @unique(map: "name") @db.VarChar(255)
  slug       String?  @unique(map: "slug") @db.VarChar(255)
  marker_url String   @unique(map: "marker_url") @db.VarChar(255)
  isActive   Boolean  @default(true)
  group      String?  @db.VarChar(255)
  isDefault  Boolean? @default(false)
  order      Int?     @default(1)
}

model canvas_user_areas {
  id                 Int                  @id @default(autoincrement())
  userId             Int?
  coords             String?              @db.LongText
  createdAt          DateTime             @db.DateTime(0)
  updatedAt          DateTime             @db.DateTime(0)
  canvas_area_coords canvas_area_coords[]
  users              users?               @relation(fields: [userId], references: [id], map: "canvas_user_areas_ibfk_1")

  @@index([userId], map: "userId")
}

model closing_form_statuses {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(255)
  isActive      Boolean?
  createdAt     DateTime        @db.DateTime(0)
  updatedAt     DateTime        @db.DateTime(0)
  isDefault     Boolean?
  slug          String?         @db.VarChar(255)
  closing_forms closing_forms[]
}

model closing_form_update_types {
  id          Int      @id @default(autoincrement())
  slug        String   @unique(map: "slug") @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  isDefault   Boolean?
  isActive    Boolean?
  order       Int?
  group       String?  @db.VarChar(255)
  section     String?  @db.VarChar(255)
  isVisible   Boolean?
}

model closing_form_updates {
  id                                                              Int             @id @default(autoincrement())
  note                                                            String?         @db.VarChar(255)
  tags                                                            String?         @db.LongText
  group                                                           String?         @db.VarChar(255)
  createdAt                                                       DateTime        @db.DateTime(0)
  closingFormId                                                   Int?
  userId                                                          Int?
  typeId                                                          Int?
  closing_forms_closing_form_updates_closingFormIdToclosing_forms closing_forms?  @relation("closing_form_updates_closingFormIdToclosing_forms", fields: [closingFormId], references: [id], onDelete: Cascade, map: "closingFormId")
  users                                                           users?          @relation(fields: [userId], references: [id], map: "closing_form_updates_ibfk_1")
  closing_forms_closing_forms_updateIdToclosing_form_updates      closing_forms[] @relation("closing_forms_updateIdToclosing_form_updates")

  @@index([closingFormId], map: "closingFormId")
  @@index([userId], map: "userId_fk")
}

model closing_forms {
  id                                                                     Int                    @id @default(autoincrement())
  createdAt                                                              DateTime               @db.DateTime(0)
  updatedAt                                                              DateTime               @db.DateTime(0)
  contactId                                                              Int?
  submittedById                                                          Int?
  isApproved                                                             Boolean?
  dateApproved                                                           DateTime?              @db.DateTime(0)
  updateId                                                               Int?
  resubmitDate                                                           DateTime?              @db.DateTime(0)
  isActive                                                               Boolean                @default(true)
  partnerId                                                              Int?
  statusId                                                               Int?
  organizationId                                                         Int?
  taxReviewAddon                                                         Boolean?
  app_events                                                             app_events[]
  closing_form_updates_closing_form_updates_closingFormIdToclosing_forms closing_form_updates[] @relation("closing_form_updates_closingFormIdToclosing_forms")
  closing_form_statuses                                                  closing_form_statuses? @relation(fields: [statusId], references: [id], onUpdate: SetNull, map: "closing_form_status")
  contacts                                                               contacts?              @relation(fields: [contactId], references: [id], map: "closing_forms_ibfk_116")
  users                                                                  users?                 @relation(fields: [submittedById], references: [id], map: "closing_forms_ibfk_117")
  closing_form_updates_closing_forms_updateIdToclosing_form_updates      closing_form_updates?  @relation("closing_forms_updateIdToclosing_form_updates", fields: [updateId], references: [id], map: "closing_forms_ibfk_118")
  partners                                                               partners?              @relation(fields: [partnerId], references: [id], map: "closing_forms_ibfk_119")
  organizations                                                          organizations?         @relation(fields: [organizationId], references: [id], map: "closing_forms_ibfk_120")
  user_closingform                                                       user_closingform[]

  @@index([partnerId], map: "closing_form_partner")
  @@index([statusId], map: "closing_form_status")
  @@index([updateId], map: "closing_forms_update")
  @@index([contactId], map: "contactId")
  @@index([organizationId], map: "organizationId")
  @@index([submittedById], map: "submittedById")
}

model closingform_comment_types {
  id                   Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(255)
  createdAt            DateTime               @db.DateTime(0)
  updatedAt            DateTime               @db.DateTime(0)
  isActive             Boolean?
  isDefault            Boolean?
  closingform_comments closingform_comments[]
}

model closingform_comments {
  id                        Int                        @id @default(autoincrement())
  comment                   String?                    @db.VarChar(255)
  createdAt                 DateTime                   @db.DateTime(0)
  updatedAt                 DateTime                   @db.DateTime(0)
  closingFormId             Int?
  userId                    Int?
  typeId                    Int?
  isActive                  Boolean?
  users                     users?                     @relation(fields: [userId], references: [id], map: "closingform_comments_ibfk_45")
  closingform_comment_types closingform_comment_types? @relation(fields: [typeId], references: [id], map: "closingform_comments_ibfk_46")

  @@index([typeId], map: "typeId")
  @@index([userId], map: "userId")
}

model commercial_poc_positions {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(255)
  isDefault       Boolean?
  isActive        Boolean?
  order           Int?
  commercial_pocs commercial_pocs[]
}

model commercial_pocs {
  id                       Int                       @id @default(autoincrement())
  firstName                String?                   @db.VarChar(255)
  lastName                 String?                   @db.VarChar(255)
  primaryPhone             String?                   @db.VarChar(255)
  primaryEmail             String?                   @db.VarChar(255)
  test                     Boolean?
  metadata                 String?                   @db.LongText
  isActive                 Boolean                   @default(true)
  group                    String?                   @db.VarChar(255)
  createdAt                DateTime                  @db.DateTime(0)
  updatedAt                DateTime                  @db.DateTime(0)
  contactId                Int?
  positionId               Int?
  contacts                 contacts?                 @relation(fields: [contactId], references: [id], map: "commercial_pocs_ibfk_1")
  commercial_poc_positions commercial_poc_positions? @relation(fields: [positionId], references: [id], map: "commercial_pocs_ibfk_2")

  @@index([contactId], map: "contactId")
  @@index([positionId], map: "positionId")
}

model company_contact_temps {
  id                Int      @id @default(autoincrement())
  companyName       String?  @db.VarChar(255)
  pocFirstName      String?  @db.VarChar(255)
  pocRole           String?  @db.VarChar(255)
  pocLastName       String?  @db.VarChar(255)
  pocEmail          String?  @db.VarChar(255)
  companyWebsite    String?  @db.VarChar(255)
  pocPrimaryPhone   String?  @db.VarChar(255)
  companyAddress1   String?  @db.VarChar(255)
  companyAddress2   String?  @db.VarChar(255)
  companyCity       String?  @db.VarChar(255)
  companyState      String?  @db.VarChar(255)
  companyPostalCode String?  @db.VarChar(255)
  solar             Boolean?
  turbine           Boolean?
  isActive          Boolean  @default(true)
  group             String?  @db.VarChar(255)
  createdAt         DateTime @db.DateTime(0)
  updatedAt         DateTime @db.DateTime(0)
}

model company_poc_temps {
  id                Int      @id @default(autoincrement())
  companyName       String?  @db.VarChar(255)
  pocFirstName      String?  @db.VarChar(255)
  pocRole           String?  @db.VarChar(255)
  pocLastName       String?  @db.VarChar(255)
  pocEmail          String?  @db.VarChar(255)
  pocPrimaryPhone   String?  @db.VarChar(255)
  companyAddress1   String?  @db.VarChar(255)
  companyAddress2   String?  @db.VarChar(255)
  companyCity       String?  @db.VarChar(255)
  companyState      String?  @db.VarChar(255)
  companyPostalCode String?  @db.VarChar(255)
  solar             Boolean?
  turbine           Boolean?
  isActive          Boolean  @default(true)
  group             String?  @db.VarChar(255)
  createdAt         DateTime @db.DateTime(0)
  updatedAt         DateTime @db.DateTime(0)
  userId            Int?
  companyWebsite    String?  @db.Text
  users             users?   @relation(fields: [userId], references: [id], map: "company_poc_temps_ibfk_1")

  @@index([userId], map: "userId")
}

model contact_action_types {
  id              Int               @id @default(autoincrement())
  name            String            @default("") @db.VarChar(255)
  isDefault       Boolean           @default(false)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @db.DateTime(0)
  contact_actions contact_actions[]
}

model contact_actions {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @db.DateTime(0)
  contactId            Int?
  typeId               Int?
  contacts             contacts?             @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "fk_contact_pk")
  contact_action_types contact_action_types? @relation(fields: [typeId], references: [id], onUpdate: SetNull, map: "fk_type_pk")

  @@index([contactId], map: "fk_contact_pk")
  @@index([typeId], map: "fk_type_pk")
}

model contact_appointment {
  createdAt     DateTime     @db.DateTime(0)
  updatedAt     DateTime     @db.DateTime(0)
  contactId     Int
  appointmentId Int
  contacts      contacts     @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "contact_appointment_ibfk_1")
  appointments  appointments @relation(fields: [appointmentId], references: [id], onDelete: Cascade, map: "contact_appointment_ibfk_2")

  @@id([contactId, appointmentId])
  @@index([appointmentId], map: "appointmentId")
}

model contact_automation_runs {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @db.DateTime(0)
  contactId    Int
  automationId Int
}

model contact_comment_types {
  id        Int      @id @default(autoincrement())
  type      String?  @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
}

model contact_comments {
  id        Int      @id @default(autoincrement())
  comment   String?  @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  contactId Int?
  userId    Int?
  users     users?   @relation(fields: [userId], references: [id], map: "contact_comments_ibfk_1")

  @@index([userId], map: "userId")
}

model contact_event_types {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(255)
  description    String?          @db.VarChar(255)
  isActive       Boolean?
  isActionable   Boolean?
  contact_events contact_events[]
}

model contact_events {
  id                  Int                  @id @default(autoincrement())
  system              Boolean?
  processDate         DateTime?            @db.DateTime(0)
  test                Boolean?
  createdAt           DateTime             @db.DateTime(0)
  typeId              Int?
  contactId           Int?
  userId              Int?
  contact_event_types contact_event_types? @relation(fields: [typeId], references: [id], map: "contact_events_ibfk_77")
  contacts            contacts?            @relation(fields: [contactId], references: [id], map: "contact_events_ibfk_78")
  users               users?               @relation(fields: [userId], references: [id], map: "contact_events_ibfk_79")

  @@index([contactId], map: "contactId")
  @@index([typeId], map: "typeId")
  @@index([userId], map: "userId")
}

model contact_sources {
  id               Int                @id @default(autoincrement())
  slug             String             @db.VarChar(255)
  name             String?            @db.VarChar(255)
  description      String?            @db.VarChar(255)
  isDefault        Boolean?
  isActive         Boolean?           @default(true)
  order            Int?
  group            String?            @db.VarChar(255)
  api_keys         api_keys[]
  auto_automations auto_automations[]
  contacts         contacts[]
  contacts_copy    contacts_copy[]
}

model contact_stages {
  id            Int             @id @default(autoincrement())
  slug          String          @unique(map: "slug") @db.VarChar(255)
  name          String?         @db.VarChar(255)
  description   String?         @db.VarChar(255)
  isDefault     Boolean?
  isActive      Boolean?
  order         Int?
  color         String?         @db.VarChar(11)
  contacts      contacts[]
  contacts_copy contacts_copy[]
}

model contact_statuses {
  id         Int   @id @default(autoincrement())
  naem       Float
  marker_url Float
}

model contact_systems {
  id        Int       @id @default(autoincrement())
  size      Int?
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  contactId Int?
  contacts  contacts? @relation(fields: [contactId], references: [id], map: "contact_systems_ibfk_1")

  @@index([contactId], map: "contactId")
}

model contact_types {
  id            Int             @id @default(autoincrement())
  slug          String          @unique(map: "slug") @db.VarChar(255)
  name          String?         @db.VarChar(255)
  description   String?         @db.VarChar(255)
  isDefault     Boolean?
  isActive      Boolean?        @default(true)
  order         Int?
  group         String?         @db.VarChar(255)
  color         String?         @db.VarChar(11)
  contacts      contacts[]
  contacts_copy contacts_copy[]
}

model contact_updates {
  id            Int             @id @default(autoincrement())
  note          String?         @db.Text
  tags          String?         @db.LongText
  group         String?         @db.VarChar(255)
  createdAt     DateTime        @db.DateTime(0)
  toId          Int?
  appointmentId Int?
  contactId     Int?
  userId        Int?
  test          Int?            @db.TinyInt
  options       options?        @relation(fields: [toId], references: [id], map: "contact_updates_ibfk_2")
  appointments  appointments?   @relation(fields: [appointmentId], references: [id], map: "contact_updates_ibfk_3")
  users         users?          @relation(fields: [userId], references: [id], map: "contact_updates_ibfk_4")
  contacts      contacts[]
  contacts_copy contacts_copy[]

  @@index([appointmentId], map: "appointmentId")
  @@index([toId], map: "toId")
  @@index([userId], map: "userId")
}

model contact_user {
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  contactId Int
  userId    Int
  contacts  contacts @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "contact_user_ibfk_1")
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "contact_user_ibfk_2")

  @@id([contactId, userId])
  @@index([userId], map: "userId")
}

model contacts {
  id                  Int                   @id @default(autoincrement())
  firstName           String?               @db.VarChar(255)
  lastName            String?               @db.VarChar(255)
  address1            String?               @db.VarChar(255)
  address2            String?               @db.VarChar(255)
  city                String?               @db.VarChar(255)
  state               String?               @db.VarChar(255)
  postalCode          String?               @db.VarChar(255)
  interests           String?               @db.LongText
  isSpanishSpeaker    Boolean?              @default(false)
  primaryPhone        String?               @db.VarChar(255)
  secondaryPhone      String?               @db.VarChar(255)
  email               String?               @db.VarChar(255)
  avgMonthlyBill      String?               @db.Text
  exactMonthlyKW      String?               @db.LongText
  closeDate           DateTime?             @db.DateTime(0)
  leadDate            DateTime?             @db.DateTime(0)
  assignDate          DateTime?             @db.DateTime(0)
  opportunityDate     DateTime?             @db.DateTime(0)
  sitDate             DateTime?             @db.DateTime(0)
  dropDate            DateTime?             @db.DateTime(0)
  isActive            Boolean               @default(true)
  organizationId      Int?
  createdAt           DateTime              @db.DateTime(0)
  updatedAt           DateTime              @db.DateTime(0)
  partnerProposalId   Int?
  lenderProposalId    Int?
  assignedById        Int?
  sourceId            Int?
  typeId              Int?
  genTypeId           Int?
  hoaId               Int?
  utilityProvider     String?               @db.Text
  roofTypeId          Int?
  test                Int?                  @db.TinyInt
  busName             String?               @db.VarChar(200)
  busWebsite          String?               @db.Text
  tzOffset            String?               @db.VarChar(20)
  updateId            Int?
  stageId             Int?                  @default(1)
  projectId           Int?
  propertyTypeId      Int?
  meta                String?               @db.LongText
  sourceNotes         String?               @db.Text
  activities          activities[]
  adders              adders[]
  app_events          app_events[]
  closing_forms       closing_forms[]
  commercial_pocs     commercial_pocs[]
  contact_actions     contact_actions[]
  contact_appointment contact_appointment[]
  contact_events      contact_events[]
  contact_systems     contact_systems[]
  contact_user        contact_user[]
  property_types      property_types?       @relation(fields: [propertyTypeId], references: [id], onUpdate: SetNull, map: "contact_propertTypeId_fk")
  roof_types          roof_types?           @relation(fields: [roofTypeId], references: [id], map: "contact_rooftype")
  contact_stages      contact_stages?       @relation(fields: [stageId], references: [id], onDelete: Restrict, map: "contact_stage_fk")
  contact_updates     contact_updates?      @relation(fields: [updateId], references: [id], onUpdate: SetNull, map: "contact_update_fk")
  contact_types       contact_types?        @relation(fields: [typeId], references: [id], map: "contacts_ibfk_10")
  gen_types           gen_types?            @relation(fields: [genTypeId], references: [id], map: "contacts_ibfk_11")
  hoas                hoas?                 @relation(fields: [hoaId], references: [id], map: "contacts_ibfk_12")
  partner_proposals   partner_proposals?    @relation(fields: [partnerProposalId], references: [id], map: "contacts_ibfk_3")
  lender_proposals    lender_proposals?     @relation(fields: [lenderProposalId], references: [id], map: "contacts_ibfk_4")
  users               users?                @relation(fields: [assignedById], references: [id], map: "contacts_ibfk_8")
  contact_sources     contact_sources?      @relation(fields: [sourceId], references: [id], map: "contacts_ibfk_9")
  organizations       organizations?        @relation(fields: [organizationId], references: [id], onUpdate: SetNull, map: "organization_fk_1")
  projects            projects?             @relation(fields: [projectId], references: [id], onUpdate: SetNull, map: "project_fk")
  documents           documents[]
  incentives          incentives[]
  notes               notes[]
  pocs                pocs[]
  promotions          promotions[]
  solar_incentives    solar_incentives[]
  tasks               tasks[]
  user_group_contact  user_group_contact[]

  @@index([assignedById], map: "assignedById")
  @@index([propertyTypeId], map: "contact_propertTypeId_fk")
  @@index([stageId], map: "contact_stage")
  @@index([updateId], map: "contact_update_fk")
  @@index([genTypeId], map: "genTypeId")
  @@index([hoaId], map: "hoaId")
  @@index([firstName, id, isActive, stageId, busName, lastName, partnerProposalId, sourceId, propertyTypeId, lenderProposalId, typeId, organizationId, updateId], map: "isActive")
  @@index([lenderProposalId], map: "lenderProposalId")
  @@index([organizationId], map: "organization_fk_1")
  @@index([partnerProposalId], map: "partnerProposalId")
  @@index([projectId], map: "project_fk")
  @@index([roofTypeId], map: "roofTypeId_Index")
  @@index([sourceId], map: "sourceId")
  @@index([state], map: "state")
  @@index([typeId], map: "typeId")
}

model contacts_copy {
  id                Int                @id @default(autoincrement())
  firstName         String?            @db.VarChar(255)
  lastName          String?            @db.VarChar(255)
  address1          String?            @db.VarChar(255)
  address2          String?            @db.VarChar(255)
  city              String?            @db.VarChar(255)
  state             String?            @db.VarChar(255)
  postalCode        String?            @db.VarChar(255)
  interests         String?            @db.LongText
  isSpanishSpeaker  Boolean?           @default(false)
  primaryPhone      String?            @db.VarChar(255)
  secondaryPhone    String?            @db.VarChar(255)
  email             String?            @db.VarChar(255)
  avgMonthlyBill    String?            @db.Text
  exactMonthlyKW    String?            @db.LongText
  closeDate         DateTime?          @db.DateTime(0)
  leadDate          DateTime?          @db.DateTime(0)
  assignDate        DateTime?          @db.DateTime(0)
  opportunityDate   DateTime?          @db.DateTime(0)
  sitDate           DateTime?          @db.DateTime(0)
  dropDate          DateTime?          @db.DateTime(0)
  isActive          Boolean            @default(true)
  organizationId    Int?
  createdAt         DateTime           @db.DateTime(0)
  updatedAt         DateTime           @db.DateTime(0)
  partnerProposalId Int?
  lenderProposalId  Int?
  assignedById      Int?
  sourceId          Int?
  typeId            Int?
  genTypeId         Int?
  hoaId             Int?
  utilityProvider   String?            @db.Text
  roofTypeId        Int?
  test              Int?               @db.TinyInt
  busName           String?            @db.VarChar(200)
  busWebsite        String?            @db.Text
  tzOffset          String?            @db.VarChar(20)
  updateId          Int?
  stageId           Int?               @default(1)
  projectId         Int?
  propertyTypeId    Int?
  meta              String?            @db.LongText
  property_types    property_types?    @relation(fields: [propertyTypeId], references: [id], onUpdate: SetNull, map: "contacts_copy_ibfk_1")
  users             users?             @relation(fields: [assignedById], references: [id], map: "contacts_copy_ibfk_10")
  contact_sources   contact_sources?   @relation(fields: [sourceId], references: [id], map: "contacts_copy_ibfk_11")
  organizations     organizations?     @relation(fields: [organizationId], references: [id], onUpdate: SetNull, map: "contacts_copy_ibfk_12")
  projects          projects?          @relation(fields: [projectId], references: [id], onUpdate: SetNull, map: "contacts_copy_ibfk_13")
  roof_types        roof_types?        @relation(fields: [roofTypeId], references: [id], map: "contacts_copy_ibfk_2")
  contact_stages    contact_stages?    @relation(fields: [stageId], references: [id], onDelete: Restrict, map: "contacts_copy_ibfk_3")
  contact_updates   contact_updates?   @relation(fields: [updateId], references: [id], onUpdate: SetNull, map: "contacts_copy_ibfk_4")
  contact_types     contact_types?     @relation(fields: [typeId], references: [id], map: "contacts_copy_ibfk_5")
  gen_types         gen_types?         @relation(fields: [genTypeId], references: [id], map: "contacts_copy_ibfk_6")
  hoas              hoas?              @relation(fields: [hoaId], references: [id], map: "contacts_copy_ibfk_7")
  partner_proposals partner_proposals? @relation(fields: [partnerProposalId], references: [id], map: "contacts_copy_ibfk_8")
  lender_proposals  lender_proposals?  @relation(fields: [lenderProposalId], references: [id], map: "contacts_copy_ibfk_9")

  @@index([assignedById], map: "assignedById")
  @@index([propertyTypeId], map: "contact_propertTypeId_fk")
  @@index([stageId], map: "contact_stage")
  @@index([updateId], map: "contact_update_fk")
  @@index([genTypeId], map: "genTypeId")
  @@index([hoaId], map: "hoaId")
  @@index([lenderProposalId], map: "lenderProposalId")
  @@index([organizationId], map: "organization_fk_1")
  @@index([partnerProposalId], map: "partnerProposalId")
  @@index([projectId], map: "project_fk")
  @@index([roofTypeId], map: "roofTypeId_Index")
  @@index([sourceId], map: "sourceId")
  @@index([typeId], map: "typeId")
}

model countries {
  id          Int      @id @default(autoincrement())
  slug        String   @unique(map: "slug") @db.VarChar(255)
  imageUrl    String?  @db.VarChar(255)
  websiteUrl  String?  @db.VarChar(255)
  description String   @db.VarChar(255)
  name        String   @db.VarChar(255)
  isActive    Boolean  @default(true)
  metadata    String?  @db.LongText
  group       String?  @db.VarChar(255)
  isDefault   Boolean  @default(false)
  isApproved  Boolean  @default(false)
  order       Int      @default(1)
  createdAt   DateTime @db.DateTime(0)
  updatedAt   DateTime @db.DateTime(0)
}

model design_requests {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
}

model document_types {
  id            Int         @id @default(autoincrement())
  slug          String      @unique(map: "slug") @db.VarChar(255)
  name          String      @db.VarChar(255)
  description   String?     @db.VarChar(255)
  isDefault     Boolean?
  isActive      Boolean?
  order         Int?
  group         String?     @db.VarChar(255)
  section       String?     @db.VarChar(255)
  isCommercial  Boolean?
  isResidential Boolean?
  documents     documents[]
}

model documents {
  id             Int             @id @default(autoincrement())
  originalName   String?         @db.VarChar(255)
  key            String?         @db.VarChar(255)
  tags           String?         @db.LongText
  metadata       String?         @db.LongText
  versionId      String          @db.VarChar(255)
  location       String          @db.VarChar(255)
  isActive       Boolean         @default(true)
  order          Int             @default(1)
  createdAt      DateTime        @db.DateTime(0)
  contactId      Int?
  typeId         Int?
  userId         Int?
  partnerId      Int?
  externalUpload Boolean?
  test           Int?
  contacts       contacts?       @relation(fields: [contactId], references: [id], map: "documents_ibfk_81")
  document_types document_types? @relation(fields: [typeId], references: [id], map: "documents_ibfk_82")
  users          users?          @relation(fields: [userId], references: [id], map: "documents_ibfk_83")
  partners       partners?       @relation(fields: [partnerId], references: [id], map: "documents_ibfk_84")

  @@index([contactId], map: "contactId")
  @@index([partnerId], map: "partnerId")
  @@index([typeId], map: "typeId")
  @@index([userId], map: "userId")
}

model equipment_residential_batteries {
  id                                    Int                                     @id @default(autoincrement())
  part_number                           String?                                 @db.VarChar(255)
  spec_sheet                            String?                                 @db.VarChar(255)
  usable_energy                         String?                                 @db.VarChar(255)
  charge_power                          String?                                 @db.VarChar(255)
  discharge_power                       String?                                 @db.VarChar(255)
  peak_discharge_power                  String?                                 @db.VarChar(255)
  peak_discharge_duration               String?                                 @db.VarChar(255)
  product_image_path                    String?                                 @db.VarChar(255)
  manufacturer_id                       Int?
  equipment_residential_battery_partner equipment_residential_battery_partner[]
}

model equipment_residential_battery_partner {
  battery_id                      Int
  partner_id                      Int
  equipment_residential_batteries equipment_residential_batteries @relation(fields: [battery_id], references: [id], onDelete: Cascade, map: "equipment_residential_battery_partner_ibfk_1")
  partners                        partners                        @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "equipment_residential_battery_partner_ibfk_2")

  @@id([battery_id, partner_id])
  @@index([partner_id], map: "partner_id")
}

model equipment_residential_inverter_partner {
  createdAt                       DateTime                        @db.DateTime(0)
  updatedAt                       DateTime                        @db.DateTime(0)
  module_id                       Int
  partner_id                      Int
  equipment_residential_inverters equipment_residential_inverters @relation(fields: [module_id], references: [id], onDelete: Cascade, map: "equipment_residential_inverter_partner_ibfk_1")
  partners                        partners                        @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "equipment_residential_inverter_partner_ibfk_2")

  @@id([module_id, partner_id])
  @@index([partner_id], map: "partner_id")
}

model equipment_residential_inverters {
  id                                     Int                                      @id @default(autoincrement())
  display_name                           String?                                  @db.VarChar(255)
  model                                  String?                                  @db.VarChar(255)
  type                                   String?                                  @db.VarChar(255)
  efficiency                             String?                                  @db.VarChar(255)
  spec_sheet                             String?                                  @db.VarChar(255)
  man_part_num                           String?                                  @db.VarChar(255)
  ced_part_num                           String?                                  @db.VarChar(255)
  soligent_part_num                      String?                                  @db.VarChar(255)
  jexpro_num                             String?                                  @db.VarChar(255)
  rated_ac                               Int?
  max_ac                                 Int?
  max_dc_input                           String?                                  @db.VarChar(255)
  max_connected_panels                   Int?
  number_of_mppt                         Int?
  inputs_per_mppt                        String?                                  @db.VarChar(255)
  max_input_voltage                      Int?
  max_input_current                      Int?
  max_output_current_v                   String?                                  @db.VarChar(255)
  min_breaker_rating                     String?                                  @db.VarChar(255)
  cec_weighted_eff_percent               String?                                  @db.VarChar(255)
  nominal_input_voltage                  String?                                  @db.VarChar(255)
  nominal_dc_input_voltage               String?                                  @db.VarChar(255)
  optimizer_max_output_current           String?                                  @db.VarChar(255)
  max_string_wattage_size                String?                                  @db.VarChar(255)
  under_module_writing                   String?                                  @db.VarChar(255)
  optimizers                             String?                                  @db.VarChar(255)
  rated_dc_input_current                 String?                                  @db.VarChar(255)
  max_string_size                        String?                                  @db.VarChar(255)
  min_string_size                        String?                                  @db.VarChar(255)
  max_output_current                     Int?
  created                                String?                                  @db.VarChar(255)
  modified                               String?                                  @db.VarChar(255)
  expired                                String?                                  @db.VarChar(255)
  part_number                            String?                                  @db.VarChar(255)
  max_input_power                        Int?
  nominal_input_current                  Int?
  max_input_string_size                  String?                                  @db.VarChar(255)
  max_input_string_quantity              String?                                  @db.VarChar(255)
  max_input_string_power                 String?                                  @db.VarChar(255)
  max_output_voltage                     Int?
  max_output_wattage                     Int?
  min_output                             String?                                  @db.VarChar(255)
  battery_ready_inverter                 String?                                  @db.VarChar(255)
  cad_type                               String?                                  @db.VarChar(255)
  min_modules_per_string                 Int?
  min_mpp_voltage                        Int?
  max_voltage_drop                       Float?                                   @db.Float
  combo                                  String?                                  @db.VarChar(255)
  auto_select                            String?                                  @db.VarChar(255)
  use_png_spec                           String?                                  @db.VarChar(255)
  includes_ev_charger                    String?                                  @db.VarChar(255)
  manufacturername                       String?                                  @db.VarChar(255)
  createdAt                              DateTime                                 @default(now()) @db.DateTime(0)
  updatedAt                              DateTime                                 @default(now()) @db.DateTime(0)
  manufacturer_id                        Int?
  equipment_residential_inverter_partner equipment_residential_inverter_partner[]
}

model equipment_residential_module_partner {
  createdAt                     DateTime                      @db.DateTime(0)
  updatedAt                     DateTime                      @db.DateTime(0)
  module_id                     Int
  partner_id                    Int
  equipment_residential_modules equipment_residential_modules @relation(fields: [module_id], references: [id], onDelete: Cascade, map: "equipment_residential_module_partner_ibfk_1")
  partners                      partners                      @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "equipment_residential_module_partner_ibfk_2")

  @@id([module_id, partner_id])
  @@index([partner_id], map: "partner_id")
}

model equipment_residential_modules {
  id                                   Int                                    @id @default(autoincrement())
  length                               Float?                                 @db.Float
  width                                Float?                                 @db.Float
  name                                 String?                                @db.VarChar(255)
  display_name                         String?                                @db.VarChar(255)
  wattage                              Float?                                 @db.Float
  degradation                          Float?                                 @db.Float
  spec_sheet                           String?                                @db.VarChar(255)
  part_number                          String?                                @db.VarChar(255)
  ced_part_number                      String?                                @db.VarChar(255)
  cad_part_number                      String?                                @db.VarChar(255)
  max_power_voltage                    Float?                                 @db.Float
  max_power_current                    Float?                                 @db.Float
  open_circuit_voltage                 Float?                                 @db.Float
  short_circuit_current                Float?                                 @db.Float
  ac_module                            String?                                @db.VarChar(255)
  dwg_file                             String?                                @db.VarChar(255)
  created                              String?                                @db.VarChar(255)
  modified                             String?                                @db.VarChar(255)
  expired                              String?                                @db.VarChar(222)
  cell_quantity                        Int?
  max_fuse_rating                      Int?
  thickness                            Float?                                 @db.Float
  backsheet_color                      String?                                @db.VarChar(255)
  frame_color                          String?                                @db.VarChar(255)
  cad_ready                            String?                                @db.VarChar(11)
  weight                               Float?                                 @db.Float
  spec_images                          String?                                @db.LongText
  manufacturer_id                      Int?
  use_png_spec                         String?                                @db.VarChar(11)
  manufacturername                     String?                                @db.VarChar(255)
  createdAt                            DateTime                               @default(now()) @db.DateTime(0)
  updatedAt                            DateTime                               @default(now()) @db.DateTime(0)
  type                                 Int?
  equipment_residential_module_partner equipment_residential_module_partner[]
}

model gen_types {
  id            Int             @id @default(autoincrement())
  slug          String          @db.VarChar(255)
  name          String?         @db.VarChar(255)
  isActive      Boolean         @default(true)
  isDefault     Boolean?
  description   String?         @db.VarChar(255)
  order         Int?
  group         String?         @db.VarChar(255)
  contacts      contacts[]
  contacts_copy contacts_copy[]
}

model hoas {
  id             Int             @id @default(autoincrement())
  websiteUrl     String?         @db.VarChar(255)
  name           String?         @db.VarChar(255)
  primaryPhone   String?         @db.VarChar(255)
  secondaryPhone String?         @db.VarChar(255)
  fax            String?         @db.VarChar(255)
  email          String?         @db.VarChar(255)
  address1       String?         @db.VarChar(255)
  address2       String?         @db.VarChar(255)
  city           String?         @db.VarChar(255)
  state          String?         @db.VarChar(255)
  postalCode     String?         @db.VarChar(255)
  isActive       Boolean?        @default(true)
  metadata       String?         @db.LongText
  order          Int?            @default(1)
  group          String?         @db.VarChar(255)
  createdAt      DateTime        @db.DateTime(0)
  updatedAt      DateTime        @db.DateTime(0)
  contacts       contacts[]
  contacts_copy  contacts_copy[]
}

model incentive_types {
  id          Int          @id @default(autoincrement())
  slug        String       @db.VarChar(255)
  name        String?      @db.VarChar(255)
  isActive    Boolean?     @default(true)
  isDefault   Boolean?
  description String?      @db.VarChar(255)
  order       Int?
  group       String?      @db.VarChar(255)
  incentives  incentives[]
  promotions  promotions[]
}

model incentives {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(255)
  isActive        Boolean?
  description     String?          @db.VarChar(255)
  order           Int?
  group           String?          @db.VarChar(255)
  createdAt       DateTime         @db.DateTime(0)
  contactId       Int?
  userId          Int?
  typeId          Int?
  test            Int?             @db.TinyInt
  contacts        contacts?        @relation(fields: [contactId], references: [id], map: "incentives_ibfk_1")
  users           users?           @relation(fields: [userId], references: [id], map: "incentives_ibfk_2")
  incentive_types incentive_types? @relation(fields: [typeId], references: [id], map: "incentives_ibfk_3")

  @@index([contactId], map: "contactId")
  @@index([typeId], map: "typeId")
  @@index([userId], map: "userId")
}

model integrations {
  id                Int      @id @default(autoincrement())
  name              String?  @db.VarChar(255)
  providerProfileId String?  @db.VarChar(255)
  accessToken       String?  @db.VarChar(255)
  profile           String?  @db.LongText
  meta              String?  @db.LongText
  isActive          Boolean?
  createdAt         DateTime @db.DateTime(0)
  userId            Int?
  refreshToken      String?  @db.VarChar(255)
  users             users?   @relation(fields: [userId], references: [id], map: "integrations_ibfk_1")

  @@index([userId], map: "userId")
}

model internal_updates {
  id                                       Int           @id @default(autoincrement())
  note                                     String?       @db.VarChar(255)
  group                                    String?       @db.VarChar(255)
  createdAt                                DateTime      @db.DateTime(0)
  fromId                                   Int?
  toId                                     Int?
  appointmentId                            Int?
  contactId                                Int?
  userId                                   Int?
  options_internal_updates_fromIdTooptions options?      @relation("internal_updates_fromIdTooptions", fields: [fromId], references: [id], map: "internal_updates_ibfk_1")
  options_internal_updates_toIdTooptions   options?      @relation("internal_updates_toIdTooptions", fields: [toId], references: [id], map: "internal_updates_ibfk_2")
  appointments                             appointments? @relation(fields: [appointmentId], references: [id], map: "internal_updates_ibfk_3")
  users                                    users?        @relation(fields: [userId], references: [id], map: "internal_updates_ibfk_4")

  @@index([appointmentId], map: "appointmentId")
  @@index([fromId], map: "fromId")
  @@index([toId], map: "toId")
  @@index([userId], map: "userId")
}

model lender_partner {
  createdAt  DateTime @db.DateTime(0)
  updatedAt  DateTime @db.DateTime(0)
  lender_id  Int
  partner_id Int
  lenders    lenders  @relation(fields: [lender_id], references: [id], onDelete: Cascade, map: "lender_partner_ibfk_1")
  partners   partners @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "lender_partner_ibfk_2")

  @@id([lender_id, partner_id])
  @@index([partner_id], map: "partner_id")
}

model lender_proposals {
  id            Int             @id @default(autoincrement())
  url           String?         @db.VarChar(255)
  loanAmount    Int?
  systemPrice   Int?
  rate          Int?
  months        Int?
  years         Int?
  isActive      Boolean         @default(true)
  metadata      String?         @db.LongText
  group         String?         @db.VarChar(255)
  createdAt     DateTime        @db.DateTime(0)
  updatedAt     DateTime        @db.DateTime(0)
  contactId     Int?
  lenderId      Int?
  submittedById Int?
  isCash        Int?            @db.TinyInt
  cashAmount    Int?
  ppwGross      Float?          @db.Float
  ppwNet        Float?          @db.Float
  systemSize    Float?          @db.Float
  selectDate    DateTime?       @db.DateTime(0)
  contacts      contacts[]
  contacts_copy contacts_copy[]
  users         users?          @relation(fields: [submittedById], references: [id], map: "lender_proposals_ibfk_1")

  @@index([submittedById], map: "submittedById")
}

model lenders {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(255)
  websiteUrl     String?          @db.VarChar(255)
  primaryPhone   String?          @db.VarChar(255)
  secondaryPhone String?          @db.VarChar(255)
  fax            String?          @db.VarChar(255)
  description    String?          @db.VarChar(255)
  email          String?          @db.VarChar(255)
  logoUrl        String?          @db.VarChar(255)
  metadata       String?          @db.LongText
  slug           String?          @db.VarChar(255)
  isActive       Boolean?         @default(true)
  isDefault      Boolean?         @default(false)
  order          Int?             @default(1)
  group          String?          @db.VarChar(255)
  lender_partner lender_partner[]
  zones          zones[]
}

model logins {
  id                            Int      @id @default(autoincrement())
  ip                            String?  @db.VarChar(255)
  data                          String?  @db.LongText
  createdAt                     DateTime @db.DateTime(0)
  userId                        Int?
  managerId                     Int?
  city                          String?  @db.Text
  state                         String?  @db.Text
  country                       String?  @db.Text
  users_logins_userIdTousers    users?   @relation("logins_userIdTousers", fields: [userId], references: [id], map: "logins_ibfk_1")
  users_logins_managerIdTousers users?   @relation("logins_managerIdTousers", fields: [managerId], references: [id], map: "logins_ibfk_2")

  @@index([managerId], map: "managerId")
  @@index([userId], map: "userId")
}

model manufacturers {
  id   Int     @id
  name String? @db.VarChar(255)
  type String? @db.VarChar(255)
}

model meters {
  id            Int      @id @default(autoincrement())
  data          String?  @db.LongText
  createdAt     DateTime @db.DateTime(0)
  updatedAt     DateTime @db.DateTime(0)
  contactId     Int?
  name          String?  @db.VarChar(50)
  accountNumber String?  @db.VarChar(30)
  meterNumber   String?  @db.VarChar(30)
}

model notes {
  id        Int       @id @default(autoincrement())
  contents  String?   @db.Text
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  contactId Int?
  userId    Int?
  test      Int?      @db.TinyInt
  contacts  contacts? @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "contact")
  users     users?    @relation(fields: [userId], references: [id], onUpdate: SetNull, map: "user")

  @@index([contactId], map: "contact")
  @@index([userId], map: "user")
}

model options {
  id                                                Int                @id @default(autoincrement())
  name                                              String             @db.VarChar(255)
  value                                             String?            @db.VarChar(255)
  options                                           String?            @db.LongText
  type                                              String             @db.VarChar(255)
  slug                                              String             @db.VarChar(255)
  group                                             String?            @db.VarChar(255)
  isActive                                          Boolean            @default(true)
  isVisible                                         Boolean?           @default(true)
  isDefault                                         Boolean?           @default(false)
  order                                             Int                @default(1)
  notifications                                     String?            @db.LongText
  contact_updates                                   contact_updates[]
  internal_updates_internal_updates_fromIdTooptions internal_updates[] @relation("internal_updates_fromIdTooptions")
  internal_updates_internal_updates_toIdTooptions   internal_updates[] @relation("internal_updates_toIdTooptions")
}

model order_statuses {
  id        Int      @id @default(autoincrement())
  isActive  Boolean? @default(true)
  name      String?  @default("0") @db.VarChar(20)
  isDefault Int?     @db.TinyInt
}

model order_types {
  id        Int      @id @default(autoincrement())
  isActive  Boolean? @default(true)
  name      String?  @default("0") @db.VarChar(20)
  isDefault Int?     @db.TinyInt
  code      String?  @db.VarChar(11)
  orders    orders[]
}

model orders {
  id              Int          @id @default(autoincrement())
  chargeId        String?      @unique(map: "transactionId") @db.VarChar(255)
  amount          String?      @db.VarChar(255)
  quantity        String?      @db.VarChar(255)
  note            String?      @db.VarChar(255)
  createdAt       DateTime     @db.DateTime(0)
  updatedAt       DateTime     @db.DateTime(0)
  organizationId  Int?
  userId          Int?
  statusId        Int?
  filledById      Int?
  stripeInvoiceId String?      @db.VarChar(20)
  fillDate        DateTime?    @db.DateTime(0)
  typeId          Int?
  users           users?       @relation(fields: [filledById], references: [id], onUpdate: SetNull, map: "fk_filledById")
  order_types     order_types? @relation(fields: [typeId], references: [id], onUpdate: SetNull, map: "fk_typeId")

  @@index([filledById], map: "fk_filledById")
  @@index([typeId], map: "fk_typeId")
}

model organizations {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String?         @db.VarChar(255)
  isActive      Boolean         @default(true)
  isDefault     Int             @default(0) @db.TinyInt
  inActiveDate  DateTime?       @db.DateTime(0)
  createdAt     DateTime        @db.DateTime(0)
  updatedAt     DateTime        @db.DateTime(0)
  config        String?         @db.LongText
  redline       Float?          @db.Float
  api_keys      api_keys[]
  closing_forms closing_forms[]
  contacts      contacts[]
  contacts_copy contacts_copy[]
  user_groups   user_groups[]
  users         users[]
}

model panel_manufacturers {
  id             Int              @id @default(autoincrement())
  slug           String           @unique(map: "slug") @db.VarChar(255)
  imageUrl       String?          @db.VarChar(255)
  websiteUrl     String?          @db.VarChar(255)
  description    String?          @default("") @db.VarChar(255)
  origin         String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  isActive       Boolean          @default(true)
  metadata       String?          @db.LongText
  isDefault      Boolean?         @default(false)
  order          Int?             @default(1)
  product_panels product_panels[]
  products       products[]
}

model partner_partner_sector {
  createdAt         DateTime        @db.DateTime(0)
  updatedAt         DateTime        @db.DateTime(0)
  partner_sector_id Int
  partner_id        Int
  partner_sectors   partner_sectors @relation(fields: [partner_sector_id], references: [id], onDelete: Cascade, map: "partner_partner_sector_ibfk_1")
  partners          partners        @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "partner_partner_sector_ibfk_2")

  @@id([partner_sector_id, partner_id])
  @@index([partner_id], map: "partner_id")
}

model partner_partner_type {
  createdAt       DateTime      @db.DateTime(0)
  updatedAt       DateTime      @db.DateTime(0)
  partner_type_id Int
  partner_id      Int
  partner_types   partner_types @relation(fields: [partner_type_id], references: [id], onDelete: Cascade, map: "partner_partner_type_ibfk_1")
  partners        partners      @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "partner_partner_type_ibfk_2")

  @@id([partner_type_id, partner_id])
  @@index([partner_id], map: "partner_id")
}

model partner_proposal_comments {
  id                Int                @id @default(autoincrement())
  comment           String?            @db.VarChar(255)
  createdAt         DateTime           @db.DateTime(0)
  updatedAt         DateTime           @db.DateTime(0)
  userId            Int?
  partnerProposalId Int?
  partner_proposals partner_proposals? @relation(fields: [partnerProposalId], references: [id], map: "partner_proposal_comments_ibfk_1")

  @@index([partnerProposalId], map: "partnerProposalId")
}

model partner_proposals {
  id                        Int                         @id @default(autoincrement())
  url                       String?                     @db.Text
  isActive                  Boolean                     @default(true)
  metadata                  String?                     @db.LongText
  group                     String?                     @db.VarChar(255)
  createdAt                 DateTime                    @db.DateTime(0)
  updatedAt                 DateTime                    @db.DateTime(0)
  contactId                 Int?
  partnerId                 Int?
  submittedById             Int?
  selectDate                DateTime?                   @db.DateTime(0)
  test                      Int?                        @db.TinyInt
  contacts                  contacts[]
  contacts_copy             contacts_copy[]
  partner_proposal_comments partner_proposal_comments[]
  users                     users?                      @relation(fields: [submittedById], references: [id], map: "partner_proposals_ibfk_1")

  @@index([submittedById], map: "submittedById")
}

model partner_sectors {
  id                     Int                      @id @default(autoincrement())
  slug                   String                   @unique(map: "slug") @db.VarChar(255)
  name                   String?                  @db.VarChar(255)
  description            String?                  @db.VarChar(255)
  isDefault              Boolean?
  isActive               Boolean?
  order                  Int?
  createdAt              DateTime                 @db.DateTime(0)
  updatedAt              DateTime                 @db.DateTime(0)
  partner_partner_sector partner_partner_sector[]
}

model partner_types {
  id                   Int                    @id @default(autoincrement())
  slug                 String                 @unique(map: "slug") @db.VarChar(255)
  name                 String?                @db.VarChar(255)
  description          String?                @db.VarChar(255)
  isDefault            Boolean?
  isActive             Boolean?
  order                Int?
  createdAt            DateTime               @db.DateTime(0)
  updatedAt            DateTime               @db.DateTime(0)
  partner_partner_type partner_partner_type[]
  partners             partners[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model partners {
  id                                     Int                                      @id @default(autoincrement())
  email                                  String                                   @db.VarChar(255)
  name                                   String?                                  @db.VarChar(255)
  description                            String?                                  @db.Text
  websiteUrl                             String?                                  @db.VarChar(255)
  primaryPhone                           String?                                  @db.VarChar(255)
  secondaryPhone                         String?                                  @db.VarChar(255)
  logoUrl                                String?                                  @db.VarChar(255)
  redLine                                Float?                                   @db.Float
  redLineUpdateDate                      DateTime?                                @db.DateTime(0)
  isActive                               Boolean                                  @default(true)
  group                                  String?                                  @default("default") @db.VarChar(255)
  order                                  Int?                                     @default(1)
  rank                                   Int?                                     @default(1)
  metadata                               String?                                  @db.LongText
  createdAt                              DateTime                                 @db.DateTime(0)
  updatedAt                              DateTime                                 @db.DateTime(0)
  userId                                 Int?
  typeId                                 Int?
  loginUrl                               String?                                  @db.Text
  isPreferred                            Int?                                     @default(0) @db.TinyInt
  config                                 String?                                  @db.LongText
  closing_forms                          closing_forms[]
  documents                              documents[]
  equipment_residential_battery_partner  equipment_residential_battery_partner[]
  equipment_residential_inverter_partner equipment_residential_inverter_partner[]
  equipment_residential_module_partner   equipment_residential_module_partner[]
  lender_partner                         lender_partner[]
  partner_partner_sector                 partner_partner_sector[]
  partner_partner_type                   partner_partner_type[]
  partner_types                          partner_types?                           @relation(fields: [typeId], references: [id], onUpdate: SetNull, map: "type_fk")
  users_partners_userIdTousers           users?                                   @relation("partners_userIdTousers", fields: [userId], references: [id], map: "user_fk")
  products                               products[]
  service_areas                          service_areas[]
  services                               services[]
  users_users_partnerIdTopartners        users[]                                  @relation("users_partnerIdTopartners")
  zones                                  zones[]

  @@index([typeId], map: "type_fk")
  @@index([userId], map: "user_fk")
}

model poc_roles {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  isDefault Boolean?
  isActive  Boolean?
  order     Int?
  pocs      pocs[]
}

model pocs {
  id           Int        @id @default(autoincrement())
  firstName    String?    @db.VarChar(255)
  lastName     String?    @db.VarChar(255)
  primaryPhone String?    @db.VarChar(255)
  primaryEmail String?    @db.VarChar(255)
  test         Boolean?
  metadata     String?    @db.LongText
  isActive     Boolean    @default(true)
  group        String?    @db.VarChar(255)
  createdAt    DateTime   @db.DateTime(0)
  updatedAt    DateTime   @db.DateTime(0)
  contactId    Int?
  roleId       Int?
  contacts     contacts?  @relation(fields: [contactId], references: [id], map: "pocs_ibfk_43")
  poc_roles    poc_roles? @relation(fields: [roleId], references: [id], map: "pocs_ibfk_44")

  @@index([contactId], map: "contactId")
  @@index([roleId], map: "roleId")
}

model pool_types {
  id          Int      @id @default(autoincrement())
  isActive    Boolean? @default(true)
  name        String?  @unique(map: "name") @db.VarChar(255)
  description String?  @db.VarChar(255)
  isDefault   Boolean  @default(false)
  order       Int?     @default(1)
}

model pools {
  id          Int      @id @default(autoincrement())
  isActive    Boolean? @default(true)
  name        String?  @unique(map: "name") @db.VarChar(255)
  description String?  @db.VarChar(255)
  isDefault   Boolean  @default(false)
  order       Int?     @default(1)
  createdAt   DateTime @db.DateTime(0)
  updatedAt   DateTime @db.DateTime(0)
}

model product_brands {
  id          Int        @id @default(autoincrement())
  slug        String     @unique(map: "slug") @db.VarChar(255)
  imageUrl    String?    @db.VarChar(255)
  websiteUrl  String?    @db.VarChar(255)
  description String     @db.VarChar(255)
  name        String     @db.VarChar(255)
  isActive    Boolean    @default(true)
  metadata    String?    @db.LongText
  isDefault   Boolean    @default(false)
  order       Int        @default(1)
  products    products[]
}

model product_manufacturers {
  id          Int     @id @default(autoincrement())
  slug        String  @unique(map: "slug") @db.VarChar(255)
  imageUrl    String? @db.VarChar(255)
  websiteUrl  String? @db.VarChar(255)
  description String  @db.VarChar(255)
  origin      String? @db.VarChar(255)
  name        String  @db.VarChar(255)
  isActive    Boolean @default(true)
  metadata    String? @db.LongText
  isDefault   Boolean @default(false)
  order       Int     @default(1)
}

model product_panel_types {
  id             Int              @id @default(autoincrement())
  name           String?          @unique(map: "name") @db.VarChar(30)
  isActive       Int?             @default(1)
  product_panels product_panels[]
}

model product_panels {
  id                  Int                  @id @default(autoincrement())
  imageUrl            String?              @db.VarChar(255)
  productUrl          String?              @db.VarChar(255)
  websiteUrl          String?              @db.VarChar(255)
  isActive            Boolean              @default(true)
  metadata            String?              @db.LongText
  isDefault           Boolean              @default(false)
  isApproved          Boolean              @default(false)
  order               Int                  @default(1)
  group               String?              @db.VarChar(255)
  nominalPower        String?              @db.VarChar(255)
  length              Int?
  width               Int?
  model               String?              @db.VarChar(255)
  tempCoeff           String?              @db.VarChar(255)
  NOCT                String?              @db.VarChar(255)
  createdAt           DateTime?            @default(now()) @db.DateTime(0)
  updatedAt           DateTime?            @default(now()) @db.DateTime(0)
  manufacturerId      Int?
  typeId              Int?
  product_panel_types product_panel_types? @relation(fields: [typeId], references: [id], map: "product_panel_type_fk")
  panel_manufacturers panel_manufacturers? @relation(fields: [manufacturerId], references: [id], map: "product_panels_ibfk_1")

  @@index([manufacturerId], map: "manufacturerId")
  @@index([typeId], map: "product_panel_type_fk")
}

model product_types {
  id          Int        @id @default(autoincrement())
  slug        String     @db.VarChar(255)
  name        String?    @db.VarChar(255)
  isActive    Boolean?
  isDefault   Boolean?
  description String?    @db.VarChar(255)
  order       Int?
  group       String?    @db.VarChar(255)
  products    products[]
}

model products {
  id                  Int                  @id @default(autoincrement())
  slug                String               @unique(map: "slug") @db.VarChar(255)
  imageUrl            String?              @db.VarChar(255)
  productUrl          String?              @db.VarChar(255)
  websiteUrl          String?              @db.VarChar(255)
  price               Float?               @db.Float
  description         String               @db.VarChar(255)
  name                String               @db.VarChar(255)
  isActive            Boolean              @default(true)
  metadata            String?              @db.LongText
  isDefault           Boolean              @default(false)
  isApproved          Boolean              @default(false)
  order               Int                  @default(1)
  group               String?              @db.VarChar(255)
  createdAt           DateTime             @db.DateTime(0)
  updatedAt           DateTime             @db.DateTime(0)
  brandId             Int?
  manufacturerId      Int?
  typeId              Int?
  partnerId           Int?
  product_brands      product_brands?      @relation(fields: [brandId], references: [id], map: "products_ibfk_1")
  panel_manufacturers panel_manufacturers? @relation(fields: [manufacturerId], references: [id], map: "products_ibfk_2")
  product_types       product_types?       @relation(fields: [typeId], references: [id], map: "products_ibfk_3")
  partners            partners?            @relation(fields: [partnerId], references: [id], map: "products_ibfk_4")

  @@index([brandId], map: "brandId")
  @@index([manufacturerId], map: "manufacturerId")
  @@index([partnerId], map: "partnerId")
  @@index([typeId], map: "typeId")
}

model project_attachment_types {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(255)
  isActive Boolean @default(true)
}

model project_attachments {
  id                  Int      @id @default(autoincrement())
  name                String?  @db.VarChar(255)
  originalName        String?  @db.VarChar(255)
  key                 String?  @db.VarChar(255)
  location            String?  @db.VarChar(255)
  description         String?  @db.VarChar(255)
  isActive            Boolean  @default(true)
  createdAt           DateTime @db.DateTime(0)
  updatedAt           DateTime @db.DateTime(0)
  projectId           Int?
  projectAttachmentId Int?
  typeId              Int?

  @@unique([projectId, projectAttachmentId], map: "project_attachments_projectId_projectAttachmentId_unique")
}

model project_boards {
  id             Int      @id @default(autoincrement())
  name           String?  @db.VarChar(255)
  description    String?  @db.VarChar(255)
  isActive       Boolean  @default(true)
  isPrimary      Boolean  @default(true)
  createdAt      DateTime @db.DateTime(0)
  updatedAt      DateTime @db.DateTime(0)
  organizationId Int?
  ownerId        Int?
  userGroupId    Int?
}

model project_comments {
  id        Int      @id @default(autoincrement())
  contents  String?  @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  projectId Int?
  repId     Int?
}

model project_labels {
  id        Int     @id @default(autoincrement())
  name      String? @db.VarChar(255)
  color     String? @db.VarChar(255)
  isActive  Boolean @default(true)
  projectId Int?
}

model project_lanes {
  id             Int      @id @default(autoincrement())
  name           String?  @db.VarChar(255)
  order          Int?
  isActive       Boolean  @default(true)
  createdAt      DateTime @db.DateTime(0)
  updatedAt      DateTime @db.DateTime(0)
  boardId        Int?
  projectBoardId Int?
}

model project_user {
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  projectId Int
  userId    Int

  @@id([projectId, userId])
}

model project_user_contributor {
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  projectId Int
  userId    Int

  @@id([projectId, userId])
}

model projects {
  id             Int             @id @default(autoincrement())
  name           String?         @db.VarChar(255)
  description    String?         @db.VarChar(255)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @db.DateTime(0)
  updatedAt      DateTime        @db.DateTime(0)
  organizationId Int?
  userGroupId    Int?
  laneId         Int?
  boardId        Int?
  projectLaneId  Int?
  contactId      Int?
  ownerId        Int?
  contacts       contacts[]
  contacts_copy  contacts_copy[]
  tasks          tasks[]
}

model promotion_types {
  id          Int      @id @default(autoincrement())
  slug        String   @db.VarChar(255)
  name        String?  @db.VarChar(255)
  isActive    Boolean?
  isDefault   Boolean?
  description String?  @db.VarChar(255)
  order       Int?
  group       String?  @db.VarChar(255)
}

model promotions {
  id              Int              @id @default(autoincrement())
  content         String?          @db.VarChar(255)
  isActive        Boolean?
  description     String?          @db.VarChar(255)
  order           Int?
  group           String?          @db.VarChar(255)
  createdAt       DateTime         @db.DateTime(0)
  contactId       Int?
  userId          Int?
  typeId          Int?
  test            Int?             @db.TinyInt
  contacts        contacts?        @relation(fields: [contactId], references: [id], map: "promotions_ibfk_1")
  users           users?           @relation(fields: [userId], references: [id], map: "promotions_ibfk_2")
  incentive_types incentive_types? @relation(fields: [typeId], references: [id], map: "promotions_ibfk_3")

  @@index([contactId], map: "contactId")
  @@index([typeId], map: "typeId")
  @@index([userId], map: "userId")
}

model property_types {
  id            Int             @id @default(autoincrement())
  name          String          @default("") @db.VarChar(255)
  isActive      Boolean         @default(true)
  isDefault     Boolean
  order         Int             @default(1)
  contacts      contacts[]
  contacts_copy contacts_copy[]
}

model resource_categories {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String?     @db.VarChar(255)
  isCommercial  Boolean?
  isResidential Boolean?
  isDefault     Boolean?
  isActive      Boolean?
  order         Int?
  resources     resources[]
}

model resource_files {
  id            Int      @id @default(autoincrement())
  name          String?  @db.VarChar(255)
  description   String?  @db.VarChar(255)
  location      String   @db.VarChar(255)
  isCommercial  Boolean?
  isResidential Boolean?
  test          Boolean?
  createdAt     DateTime @db.DateTime(0)
}

model resources {
  id                  Int                  @id @default(autoincrement())
  name                String?              @db.VarChar(255)
  description         String?              @db.VarChar(255)
  isCommercial        Boolean?
  isResidential       Boolean?
  test                Boolean?
  createdAt           DateTime             @db.DateTime(0)
  categoryId          Int?
  userId              Int?
  location            String?              @db.Text
  contentType         String?              @db.VarChar(23)
  fileName            String?              @db.VarChar(200)
  updatedAt           DateTime?            @db.DateTime(0)
  content             String?              @db.Text
  resource_categories resource_categories? @relation(fields: [categoryId], references: [id], map: "resources_ibfk_1")
  users               users?               @relation(fields: [userId], references: [id], map: "resources_ibfk_2")

  @@index([categoryId], map: "categoryId")
  @@index([userId], map: "userId")
}

model roles {
  id          Int      @id @default(autoincrement())
  slug        String   @unique(map: "slug") @db.VarChar(255)
  name        String?  @db.VarChar(255)
  views       String?  @db.LongText
  description String?  @db.VarChar(255)
  isActive    Boolean? @default(true)
  isDefault   Boolean? @default(false)
  metadata    String?  @db.LongText
  order       Int?     @default(1)
  group       String?  @db.VarChar(255)
  users       users[]
}

model roof_types {
  id            Int             @id @default(autoincrement())
  slug          String          @db.VarChar(255)
  name          String?         @db.VarChar(255)
  isActive      Boolean?
  isDefault     Boolean?
  description   String?         @db.VarChar(255)
  order         Int?
  group         String?         @db.VarChar(255)
  contacts      contacts[]
  contacts_copy contacts_copy[]
}

model service_areas {
  id          Int                   @id @default(autoincrement())
  isPrimary   Boolean?              @default(false)
  isActive    Boolean               @default(true)
  coordinates Unsupported("point")?
  createdAt   DateTime              @db.DateTime(0)
  updatedAt   DateTime              @db.DateTime(0)
  stateId     Int?
  partnerId   Int?
  states      states?               @relation(fields: [stateId], references: [id], map: "service_areas_ibfk_1")
  partners    partners?             @relation(fields: [partnerId], references: [id], onDelete: Cascade, map: "service_areas_ibfk_3")

  @@index([partnerId], map: "service_areas_ibfk_3")
  @@index([stateId], map: "stateId")
}

model services {
  id          Int       @id @default(autoincrement())
  slug        String    @unique(map: "slug") @db.VarChar(255)
  imageUrl    String?   @db.VarChar(255)
  serviceUrl  String?   @db.VarChar(255)
  websiteUrl  String?   @db.VarChar(255)
  price       Float?    @db.Float
  description String?   @db.VarChar(255)
  name        String?   @db.VarChar(255)
  isActive    Boolean?  @default(true)
  metadata    String?   @db.LongText
  group       String?   @db.VarChar(255)
  isDefault   Boolean?
  isApproved  Boolean?
  order       Int?      @default(1)
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  partnerId   Int?
  partners    partners? @relation(fields: [partnerId], references: [id], map: "services_ibfk_1")

  @@index([partnerId], map: "partnerId")
}

model solar_incentives {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  isActive    Boolean?
  description String?   @db.VarChar(255)
  order       Int?
  group       String?   @db.VarChar(255)
  test        Boolean?
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  contactId   Int?
  contacts    contacts? @relation(fields: [contactId], references: [id], map: "solar_incentives_ibfk_1")

  @@index([contactId], map: "contactId")
}

model states {
  id            Int             @id @default(autoincrement())
  code          String          @db.VarChar(2)
  state         String          @db.VarChar(25)
  country       String          @db.VarChar(7)
  service_areas service_areas[]
}

model tasks {
  id                              Int       @id @default(autoincrement())
  name                            String    @unique(map: "name") @db.VarChar(255)
  dateCompleted                   DateTime? @db.DateTime(0)
  dateAssigned                    DateTime? @db.DateTime(0)
  dueDate                         DateTime? @db.DateTime(0)
  slug                            String?   @db.VarChar(255)
  isActive                        Boolean?  @default(true)
  group                           String?   @db.VarChar(255)
  metadata                        String?   @db.LongText
  isDefault                       Boolean?  @default(false)
  order                           Int?      @default(1)
  contactId                       Int?
  assignedToId                    Int?
  assignedById                    Int?
  projectId                       Int?
  userId                          Int?
  contacts                        contacts? @relation(fields: [contactId], references: [id], map: "tasks_ibfk_1")
  users_tasks_assignedToIdTousers users?    @relation("tasks_assignedToIdTousers", fields: [assignedToId], references: [id], map: "tasks_ibfk_2")
  users_tasks_assignedByIdTousers users?    @relation("tasks_assignedByIdTousers", fields: [assignedById], references: [id], map: "tasks_ibfk_3")
  projects                        projects? @relation(fields: [projectId], references: [id], map: "tasks_ibfk_4")
  users_tasks_userIdTousers       users?    @relation("tasks_userIdTousers", fields: [userId], references: [id], map: "tasks_ibfk_5")

  @@index([assignedById], map: "assignedById")
  @@index([assignedToId], map: "assignedToId")
  @@index([contactId], map: "contactId")
  @@index([projectId], map: "projectId")
  @@index([userId], map: "userId")
}

model tenant_user {
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  tenantId  Int
  userId    Int
  tenants   tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade, map: "tenant_user_ibfk_1")
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "tenant_user_ibfk_2")

  @@id([tenantId, userId])
  @@index([userId], map: "userId")
}

model tenants {
  id          Int           @id @default(autoincrement())
  slug        String        @unique(map: "slug") @db.VarChar(255)
  isActive    Boolean?      @default(true)
  config      String?       @db.LongText
  name        String        @unique(map: "name") @db.VarChar(255)
  description String?       @db.VarChar(255)
  isDefault   Boolean       @default(false)
  order       Int?          @default(1)
  tenant_user tenant_user[]
  user_groups user_groups[]
}

model user_closingform {
  createdAt      DateTime      @db.DateTime(0)
  updatedAt      DateTime      @db.DateTime(0)
  closingform_id Int
  userId         Int
  closing_forms  closing_forms @relation(fields: [closingform_id], references: [id], onDelete: Cascade, map: "user_closingform_ibfk_1")
  users          users         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_closingform_ibfk_2")

  @@id([closingform_id, userId])
  @@index([userId], map: "userId")
}

model user_group_commercial_contact {
  createdAt   DateTime    @db.DateTime(0)
  updatedAt   DateTime    @db.DateTime(0)
  ccontactId  Int
  userGroupId Int
  user_groups user_groups @relation(fields: [userGroupId], references: [id], onDelete: Cascade, map: "user_group_commercial_contact_ibfk_2")

  @@id([ccontactId, userGroupId])
  @@index([userGroupId], map: "userGroupId")
}

model user_group_contact {
  createdAt   DateTime    @db.DateTime(0)
  updatedAt   DateTime    @db.DateTime(0)
  contactId   Int
  userGroupId Int
  contacts    contacts    @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "user_group_contact_ibfk_1")
  user_groups user_groups @relation(fields: [userGroupId], references: [id], onDelete: Cascade, map: "user_group_contact_ibfk_2")

  @@id([contactId, userGroupId])
  @@index([userGroupId], map: "userGroupId")
}

model user_group_manager {
  createdAt   DateTime    @db.DateTime(0)
  updatedAt   DateTime    @db.DateTime(0)
  userGroupId Int
  userId      Int
  user_groups user_groups @relation(fields: [userGroupId], references: [id], onDelete: Cascade, map: "user_group_manager_ibfk_1")
  users       users       @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_group_manager_ibfk_2")

  @@id([userGroupId, userId])
  @@index([userId], map: "userId")
}

model user_group_types {
  id          Int           @id @default(autoincrement())
  isActive    Boolean?      @default(true)
  name        String?       @unique(map: "name") @db.VarChar(255)
  description String?       @db.VarChar(255)
  isDefault   Boolean       @default(false)
  order       Int?          @default(1)
  slug        String?       @db.VarChar(11)
  user_groups user_groups[]
}

model user_group_user {
  createdAt   DateTime    @db.DateTime(0)
  updatedAt   DateTime    @db.DateTime(0)
  userGroupId Int
  userId      Int
  user_groups user_groups @relation(fields: [userGroupId], references: [id], onDelete: Cascade, map: "user_group_user_ibfk_1")
  users       users       @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_group_user_ibfk_2")

  @@id([userGroupId, userId])
  @@index([userId], map: "userId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_groups {
  id                            Int                             @id @default(autoincrement())
  isActive                      Boolean                         @default(true)
  name                          String                          @unique(map: "name") @db.VarChar(255)
  description                   String?                         @db.Text
  isDefault                     Boolean                         @default(false)
  order                         Int?                            @default(1)
  tenantId                      Int?
  managerId                     Int?
  zoneId                        Int?
  typeId                        Int?
  picUrl                        String?                         @db.VarChar(100)
  createdAt                     DateTime?                       @default(now()) @db.DateTime(0)
  updatedAt                     DateTime?                       @db.DateTime(0)
  organizationId                Int?
  config                        String?                         @db.LongText
  api_keys                      api_keys[]
  user_group_commercial_contact user_group_commercial_contact[]
  user_group_contact            user_group_contact[]
  user_group_manager            user_group_manager[]
  user_group_user               user_group_user[]
  organizations                 organizations?                  @relation(fields: [organizationId], references: [id], onUpdate: SetNull, map: "organization_ibfk_1")
  user_group_types              user_group_types?               @relation(fields: [zoneId], references: [id], onUpdate: SetNull, map: "user_group_type")
  tenants                       tenants?                        @relation(fields: [tenantId], references: [id], map: "user_groups_ibfk_1")
  zones                         zones?                          @relation(fields: [zoneId], references: [id], map: "user_groups_ibfk_2")
  users                         users[]

  @@index([organizationId], map: "organization_ibfk_1")
  @@index([tenantId], map: "tenantId")
  @@index([zoneId], map: "user_group_type")
}

model user_types {
  id          Int      @id @default(autoincrement())
  slug        String   @unique(map: "slug") @db.VarChar(255)
  name        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  isDefault   Boolean?
  isActive    Boolean?
  order       Int?
  createdAt   DateTime @db.DateTime(0)
  updatedAt   DateTime @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                 Int                    @id @default(autoincrement())
  email                              String                 @unique(map: "email") @default("") @db.VarChar(155)
  password                           String?                @default("") @db.VarChar(255)
  firstName                          String                 @default("") @db.VarChar(155)
  lastName                           String?                @db.VarChar(155)
  primaryPhone                       String?                @db.VarChar(255)
  picUrl                             String?                @db.Text
  passwordHash                       String?                @db.VarChar(255)
  isSpanishSpeaker                   Boolean                @default(false)
  lastLoginDate                      DateTime?              @db.DateTime(0)
  isActive                           Boolean?               @default(true)
  inActiveDate                       DateTime?              @db.DateTime(0)
  metadata                           String?                @db.LongText
  createdAt                          DateTime               @db.DateTime(0)
  updatedAt                          DateTime               @db.DateTime(0)
  userGroupId                        Int?
  roleId                             Int?
  isManager                          Int?                   @db.TinyInt
  baseline                           Float?                 @db.Float
  profileId                          Int?
  partnerId                          Int?
  apiKey                             String?                @db.VarChar(10)
  isSelfGenOnly                      Boolean                @default(false)
  timezone                           String?                @db.LongText
  lastManagerLoginDate               DateTime?              @db.DateTime(0)
  fid                                String?                @db.VarChar(100)
  notifications                      String?                @db.LongText
  organizationId                     Int?
  stripeCustomerId                   String?                @db.VarChar(20)
  config                             String?                @db.LongText
  activities                         activities[]
  adders                             adders[]
  api_keys                           api_keys[]
  app_emails                         app_emails[]
  app_events                         app_events[]
  app_phones                         app_phones[]
  appointments                       appointments[]
  auto_automations                   auto_automations[]
  calendars                          calendars[]
  canvas_user_areas                  canvas_user_areas[]
  closing_form_updates               closing_form_updates[]
  closing_forms                      closing_forms[]
  closingform_comments               closingform_comments[]
  company_poc_temps                  company_poc_temps[]
  contact_comments                   contact_comments[]
  contact_events                     contact_events[]
  contact_updates                    contact_updates[]
  contact_user                       contact_user[]
  contacts                           contacts[]
  contacts_copy                      contacts_copy[]
  documents                          documents[]
  incentives                         incentives[]
  integrations                       integrations[]
  internal_updates                   internal_updates[]
  lender_proposals                   lender_proposals[]
  logins_logins_userIdTousers        logins[]               @relation("logins_userIdTousers")
  logins_logins_managerIdTousers     logins[]               @relation("logins_managerIdTousers")
  notes                              notes[]
  orders                             orders[]
  partner_proposals                  partner_proposals[]
  partners_partners_userIdTousers    partners[]             @relation("partners_userIdTousers")
  promotions                         promotions[]
  resources                          resources[]
  tasks_tasks_assignedToIdTousers    tasks[]                @relation("tasks_assignedToIdTousers")
  tasks_tasks_assignedByIdTousers    tasks[]                @relation("tasks_assignedByIdTousers")
  tasks_tasks_userIdTousers          tasks[]                @relation("tasks_userIdTousers")
  tenant_user                        tenant_user[]
  user_closingform                   user_closingform[]
  user_group_manager                 user_group_manager[]
  user_group_user                    user_group_user[]
  organizations                      organizations?         @relation(fields: [organizationId], references: [id], onUpdate: SetNull, map: "organizations_fk_1")
  partners_users_partnerIdTopartners partners?              @relation("users_partnerIdTopartners", fields: [partnerId], references: [id], map: "partnerId")
  user_groups                        user_groups?           @relation(fields: [userGroupId], references: [id], map: "users_ibfk_1")
  roles                              roles?                 @relation(fields: [roleId], references: [id], map: "users_ibfk_2")

  @@index([organizationId], map: "organizations_fk_1")
  @@index([partnerId], map: "partnerId")
  @@index([roleId], map: "roleId")
  @@index([userGroupId], map: "userGroupId")
}

model utility_providers {
  id        Int     @id @default(autoincrement())
  name      String? @db.VarChar(255)
  shortName String? @db.VarChar(255)
  state     String? @db.VarChar(255)
  ratePlans String? @db.LongText
}

model zones {
  id          Int                   @id @default(autoincrement())
  county      String?               @db.VarChar(255)
  state       String?               @db.VarChar(255)
  city        String?               @db.VarChar(255)
  postalCode  String?               @db.VarChar(255)
  address1    String?               @db.VarChar(255)
  address2    String?               @db.VarChar(255)
  metadata    String?               @db.LongText
  isPrimary   Boolean?
  isActive    Boolean?
  coordinates Unsupported("point")?
  partnerId   Int?
  lenderId    Int?
  user_groups user_groups[]
  partners    partners?             @relation(fields: [partnerId], references: [id], map: "zones_ibfk_1")
  lenders     lenders?              @relation(fields: [lenderId], references: [id], map: "zones_ibfk_2")

  @@index([lenderId], map: "lenderId")
  @@index([partnerId], map: "partnerId")
}
