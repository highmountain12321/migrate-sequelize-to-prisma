// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model Appointment {
  id              Int      @id @default(autoincrement())
  utcStartDateTime DateTime?
  timezoneOffset  String?
  startDate       String?
  endDate         String?
  fromDate        DateTime?
  toDate          DateTime?
  metadata        Json?
  cancelledAt     DateTime?
  timezone        Json?
  tzOffset        Int?
  test            Boolean?
  isActive        Boolean @default(true)
  group           String  @default("default")

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt
  // You can add relationships and indexes here if needed.
}

// If you have any other models or relationships, define them below.
// schema.prisma

model AppEmail {
  id          Int      @id @default(autoincrement())
  email       String
  provider    String
  providerId  String
  isActive    Boolean @default(true)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

// schema.prisma

model AppPhone {
  id               Int      @id @default(autoincrement())
  phone            String
  provider         String
  providerPhoneId  String
  isActive         Boolean @default(true)

  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model AutoActionType {
  id       Int     @id @default(autoincrement())
  name     String?
  isActive Boolean @default(true)
}

model AutoAction {
  id          Int     @id @default(autoincrement())
  name        String?
  fn          String?
  description String?
  isActive    Boolean @default(true)
}

model AutoAutomationLog {
  id      Int     @id @default(autoincrement())
  log     String?
  isError Boolean

  createdAt DateTime @default(now())
}

model AutoAutomation {
  id          Int      @id @default(autoincrement())
  name        String?
  twilioFlowId String?
  targetUrl   String?
  phoneNumber String?
  isPrivate   Boolean  @default(true)
  isActive    Boolean  @default(true)
  lastRunDate DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AutoEventTriggerType {
  id       Int     @id @default(autoincrement())
  name     String?
  isActive Boolean @default(true)
}

model AutoEventTrigger {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  isActive    Boolean @default(true)
}

model ContactEventType {
  id           Int     @id @default(autoincrement())
  name         String?
  description  String?
  isActive     Boolean @default(true)
  isActionable Boolean @default(true)
}

model ContactEvent {
  id         Int      @id @default(autoincrement())
  system     Boolean
  processDate DateTime?
  test       Boolean

  createdAt  DateTime @default(now())
}

model ClosingformCommentType {
  id        Int     @id @default(autoincrement())
  name      String?
  isActive  Boolean @default(true)
  isDefault Boolean
}

model ClosingformComment {
  id       Int     @id @default(autoincrement())
  comment  String?
  isActive Boolean @default(true)
}

model ClosingFormStatus {
  id        Int     @id @default(autoincrement())
  name      String?
  slug      String?
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
}

model ClosingFormUpdateType {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  name        String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  isVisible   Boolean @default(false)
  order       Int     @default(1)
  group       String  @default("default")
  section     String  @default("contact")
}
// In the Sequelize model you provided, the beforeValidate hook is used to transform the slug field based on the name field if the slug isn't set. While Prisma's schema language doesn't directly support hooks like this, you can handle this logic in your application layer when creating or updating ClosingFormUpdateType records.

model ClosingFormUpdate {
  id     Int     @id @default(autoincrement())
  note   String?
  tags   Json?
  group  String  @default("default")

  createdAt DateTime @default(now())
}
// In the Sequelize model, you have a beforeCreate hook to trim the note field. In Prisma, this kind of transformation would typically be done in your application logic before persisting the data to the database.

model ClosingForm {
  id             Int      @id @default(autoincrement())
  resubmitDate   DateTime?
  isApproved     Boolean?
  isActive       Boolean  @default(true)
  taxReviewAddon Boolean  @default(false)
  dateApproved   DateTime?
  statusId       Int
  partnerId      Int
  contactId      Int

  status   ClosingFormStatus @relation(fields: [statusId], references: [id])
  partner  Partner            @relation(fields: [partnerId], references: [id])
  contact  Contact            @relation(fields: [contactId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// These are for the ClosingForm
// model ClosingFormStatus {
//   id          Int            @id @default(autoincrement())
//   name        String
//   slug        String
//   isActive    Boolean        @default(true)
//   isDefault   Boolean        @default(false)
//   ClosingForm ClosingForm[]
// }

// model Partner {
//   id          Int            @id @default(autoincrement())
//   name        String
//   url         String
//   ClosingForm ClosingForm[]
// }

// model Contact {
//   id                Int       @id @default(autoincrement())
//   busName           String?
//   firstName         String?
//   lastName          String?
//   genTypeId         Int?
//   users             User[]
//   partnerProposals  PartnerProposal[]
//   ClosingForm       ClosingForm[]

//   genType GenType @relation(fields: [genTypeId], references: [id])
// }

// model GenType {
//   id      Int      @id @default(autoincrement())
//   name    String
//   Contact Contact[]
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   name    String
//   Contact Contact[]
// }

// model PartnerProposal {
//   id         Int     @id @default(autoincrement())
//   selectDate DateTime
//   partnerId  Int
//   contactId  Int

//   partner Partner @relation(fields: [partnerId], references: [id])
//   contact Contact @relation(fields: [contactId], references: [id])
// }

model ContactCommentType {
  id        Int       @id @default(autoincrement())
  type      String
}

model ContactComment {
  id      Int    @id @default(autoincrement())
  comment String
}

model PocRole {
  id          Int     @id @default(autoincrement())
  name        String
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  order       Int     @default(1)
  pocs        Poc[] // This is recommendation(closing_form, contact, closing_form_update....)
}


model Poc {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  primaryPhone String?
  primaryEmail String?
  test        Boolean?
  metadata    Json?
  isActive    Boolean  @default(true)
  group       String   @default("default")
  role        PocRole?  @relation(fields: [roleId], references: [id])
  roleId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model DocumentType {
  id            Int     @id @default(autoincrement())
  slug          String  @unique
  name          String
  description   String?
  isCommercial  Boolean @default(false)
  isResidential Boolean @default(false)
  isDefault     Boolean @default(false)
  isActive      Boolean @default(true)
  order         Int     @default(1)
  group         String  @default("default")
  section       String  @default("contact")
}
// We don't have the beforeValidate hook in Prisma. In Prisma, this kind of logic usually resides in your application layer (for instance, before saving a model). If you need this slug generation, you would typically handle it in the logic before creating/updating the model in the database.

model Document {
  id            Int      @id @default(autoincrement())
  originalName  String?
  key           String?
  externalUpload Boolean?
  tags          Json?    // Assuming the JSON here will be represented as Json in Prisma
  metadata      Json?    // Same assumption as above
  versionId     String   @map("version_id")
  location      String
  isActive      Boolean  @default(true)
  order         Int      @default(1)
  test          Int?     // Assuming this is supposed to be an integer based on the Sequelize model

  createdAt     DateTime @default(now()) @map("created_at")
}


model Manufacturer {
  id   Int    @id @default(autoincrement())
  name String?
  type String?

  @@map("manufacturer")
}

model EquipmentResidentialBattery {
  id                    Int    @id @default(autoincrement())
  part_number           String?
  spec_sheet            String?
  usable_energy         String?
  charge_power          String?
  discharge_power       String?
  peak_discharge_power  String?
  peak_discharge_duration String?
  product_image_path    String?

  @@map("equipment_residential_battery")
}

model EquipmentResidentialInverter {
  id                       Int     @id @default(autoincrement())
  display_name             String?
  model                    String?
  type                     String?
  efficiency               String?
  spec_sheet               String?
  man_part_num             String?
  ced_part_num             String?
  soligent_part_num        String?
  jexpro_num               String?
  rated_ac                 Int?
  max_ac                   Int?
  max_dc_input             String?
  max_connected_panels     Int?
  number_of_mppt           Int?
  inputs_per_mppt          String?
  max_input_voltage        Int?
  max_input_current        Int?
  max_output_current_v     String?
  min_breaker_rating       String?
  cec_weighted_eff_percent String?
  nominal_input_voltage    String?
  nominal_dc_input_voltage String?
  optimizer_max_output_current String?
  max_string_wattage_size  String?
  under_module_writing     String?
  optimizers               String?
  rated_dc_input_current   String?
  max_string_size          String?
  min_string_size          String?
  max_output_current       Int?
  created                  String?
  modified                 String?
  expired                  String?
  part_number              String?
  max_input_power          Int?
  nominal_input_current    Int?
  max_input_string_size    String?
  max_input_string_quantity String?
  max_input_string_power   String?
  max_output_voltage       Int?
  max_output_wattage       Int?
  min_output               String?
  battery_ready_inverter   String?
  cad_type                 String?
  min_modules_per_string   Int?
  min_mpp_voltage          Int?
  max_voltage_drop         Float?
  combo                    String?
  auto_select              String?
  use_png_spec             String?
  includes_ev_charger      String?
  manufacturername         String?
  createdAt                DateTime @default(now()) 
  updatedAt                DateTime @updatedAt

  @@map("equipment_residential_inverter")
}

model EquipmentResidentialModule {
  id                   Int       @id @default(autoincrement())
  length               Float?
  width                Float?
  name                 String?
  display_name         String?
  wattage              Float?
  degradation          Float?
  spec_sheet           String?
  part_number          String?
  ced_part_number      String?
  cad_part_number      String?
  max_power_voltage    Float?
  max_power_current    Float?
  open_circuit_voltage Float?
  short_circuit_current Float?
  ac_module            String?
  dwg_file             String?
  created              String?
  modified             String?
  expired              DateTime?
  cell_quantity        Int?
  max_fuse_rating      Int?
  thickness            Float?
  backsheet_color      String?
  frame_color          String?
  cad_ready            Boolean?
  weight               Float?
  spec_images          Json?
  use_png_spec         Boolean?
  manufacturername     String?
  createdAt            DateTime @default(now()) 
  updatedAt            DateTime @updatedAt
  
  @@map("equipment_residential_module")
}

model AppEventCategory {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  slug        String?
  isActive    Boolean @default(true)
  
  @@map("app_event_category")
}
model AppEventLevel {
  id        Int     @id @default(autoincrement())
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
  name      String?
  slug      String?

  @@map("app_event_level")
}
model AppEventType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  slug        String
  isActive    Boolean @default(true)

  @@map("app_event_type")
}
model AppEvent {
  id          Int     @id @default(autoincrement())
  isDismissed Boolean
  comment     String?
  createdAt   DateTime @default(now())

  @@map("app_event")
}


model SolarIncentive {
  id          Int      @id @default(autoincrement())
  name        String
  isActive    Boolean  @default(true)
  description String?
  order       Int      @default(1)
  group       String   @default("default")
  test        Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("solar_incentive")
}


model Lender {
  id            Int      @id @default(autoincrement())
  name          String
  websiteUrl    String?
  primaryPhone  String?
  secondaryPhone String?
  fax           String?
  description   String?
  email         String?
  logoUrl       String?
  metadata      Json?
  slug          String?  @unique
  isActive      Boolean  @default(true)
  isDefault     Boolean? @default(false)
  order         Int      @default(1)
  group         String   @default("default")

  @@map("lender")
}

model LenderProposal {
  id          Int      @id @default(autoincrement())
  url         String
  loanAmount  Int
  systemPrice Int
  systemSize  Int
  rate        Int
  months      Int
  years       Int
  isCash      Boolean  @default(false)
  cashAmount  Int
  ppwGross    Float
  ppwNet      Float
  isActive    Boolean  @default(true)
  metadata    Json?
  selectDate  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lender_proposal")
}


model OrderStatus {
  id        Int     @id @default(autoincrement())
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
  name      String
  
  @@map("order_status")
}
model OrderType {
  id        Int     @id @default(autoincrement())
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
  name      String
  code      String
  orders    Order[]           //Added as recommended
  @@map("order_type")
}
model Order {
  id              Int         @id @default(autoincrement())
  fillDate        DateTime?   // Nullable because it is not specified as required
  chargeId        String?
  stripeInvoiceId String?
  amount          String?
  quantity        Int?
  note            String?
  statusId        Int
  status          OrderStatus @relation(fields: [statusId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("order")
}
////// This is equivalent for the hook beforeCreate 
// const { PrismaClient } = require('@prisma/client');

// const prisma = new PrismaClient();

// prisma.$use(async (params, next) => {
//     if (params.model === 'Order' && params.action === 'create') {
//         if (!params.args.data.statusId) {
//             const defaultStatus = await prisma.orderStatus.findFirst({
//                 where: { isDefault: true }
//             });
//             params.args.data.statusId = defaultStatus.id;
//         }
//     }
//     return next(params);
// });

// // Use prisma to make further database calls.


model Partner {
  id                 Int             @id @default(autoincrement())
  email              String
  name               String?
  description        String?
  websiteUrl         String?
  primaryPhone       String?
  secondaryPhone     String?
  logoUrl            String?
  loginUrl           String?
  isPreferred        Boolean         @default(false)
  isActive           Boolean         @default(true)
  order              Int             @default(1)
  redline            Float?
  virtServiceAreaStates String[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  
  sectors            PartnerSector[]

  @@map("partner")
}
model PartnerType {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String?
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  order       Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("partner_type")
}
// HOOK EQUIVALENT
// function generateSlug(name) {
//   if (name) {
//     return name.toLowerCase().replace(/ /g, "-");
//   }
//   return null;
// }

// async function createPartnerType(data) {
//   if (!data.slug && data.name) {
//     data.slug = generateSlug(data.name);
//   } else if (data.slug) {
//     data.slug = generateSlug(data.slug);
//   }

//   return await prisma.partnerType.create({
//     data: data
//   });
// }

model PartnerSector {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String?
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  order       Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("partner_sector")
}
// function generateSlug(name) {
//   if (name) {
//     return name.toLowerCase().replace(/ /g, "-");
//   }
//   return null;
// }

// async function createPartnerSector(data) {
//   if (!data.slug && data.name) {
//     data.slug = generateSlug(data.name);
//   } else if (data.slug) {
//     data.slug = generateSlug(data.slug);
//   }

//   return await prisma.partnerSector.create({
//     data: data
//   });
// }

model PoolType {
  id          Int     @id @default(autoincrement())
  isActive    Boolean @default(true)
  name        String  @unique
  description String?
  isDefault   Boolean @default(false)
  order       Int     @default(1)

  @@map("pool_type")
}

model Pool {
  id          Int     @id @default(autoincrement())
  isActive    Boolean @default(true)
  name        String  @unique
  description String?
  isDefault   Boolean @default(false)
  order       Int     @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pool")
}


model ProjectAttachmentType {
  id       Int     @id @default(autoincrement())
  name     String
  isActive Boolean @default(true)

  @@map("project_attachment_type")
}
model ProjectAttachment {
  id           Int     @id @default(autoincrement())
  name         String
  originalName String
  key          String
  location     String
  description  String?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
model ProjectBoard {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean  @default(true)
  isPrimary   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model ProjectComment {
  id       Int      @id @default(autoincrement())
  contents String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model ProjectLabel {
  id       Int     @id @default(autoincrement())
  name     String
  color    String
  isActive Boolean @default(true)
}
model ProjectLane {
  id       Int     @id @default(autoincrement())
  name     String
  order    Int
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
